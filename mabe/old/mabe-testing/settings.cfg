% GLOBAL
  mode = run                                 # (string) mode to run MABE in [run,visualize]
  outputDirectory = ./                       # (string) where files will be written
  popSize = 100                              # (int) number of genomes in the population
  randomSeed = 101                           # (int) seed for random number generator, if -1 random number generator will be seeded randomly
  updates = 50                               # (int) how long the program will run

% ARCHIVIST
  outputMethod = Default                     # (string) output method, [Default, SSwD, LODwAP]

% ARCHIVIST_DEFAULT
  maxFileName = max.csv                      # (string) name of max file (saves data on organism with max "score" as determined by Optimizer)
  popFileColumns = []                        # (string) data to be saved into average file (must be values that can generate an average). If empty, MABE will try to figure it out
  popFileName = pop.csv                      # (string) name of population data file (saves population averages)
  realtimeSequence = :10                     # (string) How often to write to realtime data files. (format: x = single value, x-y = x to y, x-y:z = x to y on x, :z = from 0 to
                                             #    updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  snapshotDataFilePrefix = snapshotData      # (string) prefix for name of snapshot data file
  snapshotDataSequence = :100                # (string) How often to save a realtime snapshot data file. (format: x = single value, x-y = x to y, x-y:z = x to y on x, :z = from 0
                                             #    to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  snapshotOrganismFilePrefix = snapshotOrganisms # (string) prefix for name of snapshot organism file
  snapshotOrganismSequence = :1000           # (string) How often to save a realtime snapshot genome file. (format: x = single value, x-y = x to y, x-y:z = x to y on x, :z = from
                                             #    0 to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  writeMaxFile = 1                           # (bool) Save data to Max file?
  writePopFile = 1                           # (bool) Save data to average file?
  writeSnapshotDataFiles = 0                 # (bool) if true, snapshot data files will be written (with all non genome data for entire population)
  writeSnapshotOrganismsFiles = 0            # (bool) if true, snapshot organism files will be written (with all organisms for entire population)

% ARCHIVIST_LODWAP
  dataFileName = LOD_data.csv                # (string) name of genome file (stores genomes for line of decent)
  dataSequence = :100                        # (string) How often to write to data file. (format: x = single value, x-y = x to y, x-y:z = x to y on x, :z = from 0 to updates on z,
                                             #    x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  genomeFileName = LOD_organism.csv          # (string) name of data file (stores everything but genomes)
  organismSequence = :1000                   # (string) How often to write genome file. (format: x = single value, x-y = x to y, x-y:z = x to y on x, :z = from 0 to updates on z,
                                             #    x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  pruneInterval = 100                        # (int) How often to attempt to prune LOD and actually write out to files
  terminateAfter = 10                        # (int) how long to run after updates (to get allow time for coalescence)
  writeDataFile = 1                          # (bool) if true, a data file will be written
  writeOrganismFile = 1                      # (bool) if true, a organism file will be written

% ARCHIVIST_SSWD
  cleanupInterval = 100                      # (int) How often to cleanup old checkpoints
  dataDelay = 10                             # (int) when using Snap Shot with Delay output Method, how long is the delay before saving data
  dataFilePrefix = SSwD_data                 # (string) name of genome file (stores genomes)
  dataSequence = :100                        # (string) when to save a data file (format: x = single value, x-y = x to y, x-y:z = x to y on x, :z = from 0 to updates on z, x:z =
                                             #    from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  organismDelay = 10                         # (int) when using Snap Shot with Delay output Method, how long is the delay before saving organisms 
  organismFilePrefix = SSwD_organism         # (string) name of data file (stores everything but organism file data)
  organismSequence = :1000                   # (string) when to save a organism file (format: x = single value, x-y = x to y, x-y:z = x to y on x, :z = from 0 to updates on z, x:z
                                             #    = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  writeDataFiles = 1                         # (bool) if true, data files will be written
  writeOrganismFiles = 1                     # (bool) if true, genome files will be written

% OPTIMIZER
  optimizer = Simple                         # (string) optimizer to be used, [Simple]

% OPTIMIZER_SIMPLE
  elitismCount = 1                           # (string) number of mutated offspring added to next population for each elite organism (MTree)
  elitismRange = 0                           # (string) number of elite organisms (i.e. if 5, then best 5) (MTree)
  numberParents = 1                          # (int) number of parents used to produce offspring
  optimizeValue = DM_AVE[score]              # (string) value to optimize (MTree)
  selectionMethod = Roulette()               # (string) how are parents selected? options: Roullette(),Tounament(size=VAL)
  selfRate = 0                               # (string) value between 0 and 1, liklyhood that an organism will survive (MTree)
  surviveRate = 0                            # (string) value between 0 and 1, likelyhood that an organism will self (ignored if numberParents = 1) (MTree)

% PARAMETER_FILES
  commentIndent = 45                         # (int) minimum space before comments
  maxLineLength = 180                        # (int) maximum line length

% VISUALIZATION_MODE
  visualizeOrgIDs = [-1]                     # (string) ID of Genome you would like to visualize. -1 last genome file, -2 all genomes in file (world must support group evaluate)
  visualizePopulationFile = genome_1000.csv  # (string) which genome file do you wish to load

% VISUALIZATION_MODE_WORLD_BERRY
  saveOrgActions = 0                         # (bool) in visualize mode, save organisms actions to file with name [Org->ID]_actions.txt
  visualizationFileName = worldUpdatesFile.txt # (string) in visualize mode, visualization data will be written to this file.

% VISUALIZATION_MODE_WORLD_BERRY_PLUS
  saveOrgActions = 0                         # (bool) in visualize mode, save organisms actions to file with name [Org->ID]_actions.txt
  visualizationFileName = worldUpdatesFile.txt # (string) in visualize mode, visualization data will be written to this file.

