% WORLD
  debug = 0                                  # (bool) run world in debug mode (if available)
  worldType = Berry                          # (string) world to be used, [Berry, Weed, MorrisTest, Memory, BerryPlus, IPD, NumeralClassifier, SOF, Test, RPP]

% WORLD_BERRY
  boarderEdge = 0                            # (int) edge (may overlap wall) that will be left empty (food0)
  clearOutputs = 0                           # (bool) if true outputs will be cleared on each world update
  fixedStartFacing = -1                      # (int) start facing direction (range 0-7) for organism, -1 = random
  fixedStartXRange = [-1]                    # (string) range for start location for organism (i.e. [x] for a fixed value, [x,y] to place in range), [-1] = random
  fixedStartYRange = [-1]                    # (string) range for start location for organism (i.e. [x] for a fixed value, [x,y] to place in range), [-1] = random
  foodTypes = 2                              # (int) number of types of food
  groupEvaluation = 0                        # (bool) if true, evaluate population concurrently
  makeBorderWalls = 1                        # (bool) if true world will have a bounding wall
  mapFileList = []                           # (string) list of worlds in which to evaluate organism. If empty, random world will be created
  mapFileWhichMaps = [random]                # (string) if mapFileList is not empty, this parameter will determine which maps are seen by an organism in one evaluation.
                                             #    [random] select one random map
                                             #    [all] select all maps (from all files)
                                             #    if two values are present the first determines which files to pull maps from, the second which maps from those files
                                             #    the options for the first position (file) are:
                                             #      'all' (pull from all files)
                                             #      '#' (pull from # random files - with possible repeats)
                                             #      'u#' (pull from # unique files)
                                             #    the options for the second position (map) are:
                                             #      'all' (all maps in the file)
                                             #      '#' (# random maps from file - with possible repeats)
                                             #      'u#' (# unique maps from file)
                                             #    example1: [all,u2] = from all files, 2 unique maps
                                             #    example2: [2,1] one map from each two files (might be the same file twice)
  recordFoodList = 0                         # (bool) if true, record list of food eaten
  recordFoodListEatEmpty = 0                 # (bool) if true, foodList will include attempts to eat 0
  recordFoodListNoEat = 0                    # (bool) if true, if true foodList will include no eat (-1)
  repeats = 3                                # (int) Number of times to test each Organism per generation
  replacementDefaultRule = -1                # (int) -1 = random, 0 = no replacement, 1 = replace other (note: Food0, can be replace by Food0)
  replacementFood0 = -1                      # (int) when this type of food is replaced, replace with value, -1 = use 'replacement' value
  replacementFood1 = -1                      # (int) when this type of food is replaced, replace with value, -1 = use 'replacement' value
  replacementFood2 = -1                      # (int) when this type of food is replaced, replace with value, -1 = use 'replacement' value
  replacementFood3 = -1                      # (int) when this type of food is replaced, replace with value, -1 = use 'replacement' value
  replacementFood4 = -1                      # (int) when this type of food is replaced, replace with value, -1 = use 'replacement' value
  replacementFood5 = -1                      # (int) when this type of food is replaced, replace with value, -1 = use 'replacement' value
  replacementFood6 = -1                      # (int) when this type of food is replaced, replace with value, -1 = use 'replacement' value
  replacementFood7 = -1                      # (int) when this type of food is replaced, replace with value, -1 = use 'replacement' value
  replacementFood8 = -1                      # (int) when this type of food is replaced, replace with value, -1 = use 'replacement' value
  rewardForFood0 = 0.0                       # (double) reward for eating a Food0
  rewardForFood1 = 1.0                       # (double) reward for eating a Food1
  rewardForFood2 = 1.0                       # (double) reward for eating a Food2
  rewardForFood3 = 1.0                       # (double) reward for eating a Food3
  rewardForFood4 = 1.0                       # (double) reward for eating a Food4
  rewardForFood5 = 1.0                       # (double) reward for eating a Food5
  rewardForFood6 = 1.0                       # (double) reward for eating a Food6
  rewardForFood7 = 1.0                       # (double) reward for eating a Food7
  rewardForFood8 = 1.0                       # (double) reward for eating a Food8
  senseDown = 1                              # (bool) if true, Agent can sense what it's standing on
  senseFront = 1                             # (bool) if true, Agent can sense what's in front of it
  senseFrontSides = 0                        # (bool) if true, Agent can sense what's in front to the left and right of it
  senseOther = 0                             # (bool) if true, Agents will be able to sense other agents (if there are other agents).
  senseVisited = 0                           # (bool) organism can sense if any organism has visited here
  senseWalls = 0                             # (bool) if true, Agent can sense Walls
  taskSwitchingCost = 1.4                    # (double) cost to change food sources
  worldUpdates = 400                         # (int) amount of time a brain is tested
  worldUpdatesBaisedOnInitial = 0.0          # (double) if greater then 0 then worldUpdates will be this value * number of food in world at worldUpdate 0
  worldX = 8                                 # (int) world X size
  worldY = 8                                 # (int) world Y size

% WORLD_BERRY_ADVANCED
  allowMoveAndEat = 0                        # (bool) if true, the brain can move and eat in the same world update
  alwaysEat = 0                              # (bool) if true, brain will only have 2 outputs (0 0 : no action, 1 0 : left, 0 1 : right, 1 1 : move). Organism will always eat if
                                             #    food is present.
  alwaysStartOnFoodOfType = -1               # (int) if -1 organisms are placed randomly. if > -1, all organisms will start on this type of food (must be < 9)
  makeRandomWalls = 0                        # (int) add this many walls to the world
  recordConsumptionRatio = 0                 # (bool) if true, record greater of red/blue+1 or blue/red+1
  relativeScoring = 0                        # (bool) score will be divided by the value of the positively scoring food on the initial map (useful when replacement = 0)
  replacementRatioFood0 = 0                  # (int) Relative likelihood to leave empty space empty
  replacementRatioFood1 = 1                  # (int) Relative likelihood to place Food1
  replacementRatioFood2 = 1                  # (int) Relative likelihood to place Food2
  replacementRatioFood3 = 1                  # (int) Relative likelihood to place Food3
  replacementRatioFood4 = 1                  # (int) Relative likelihood to place Food4
  replacementRatioFood5 = 1                  # (int) Relative likelihood to place Food5
  replacementRatioFood6 = 1                  # (int) Relative likelihood to place Food6
  replacementRatioFood7 = 1                  # (int) Relative likelihood to place Food7
  replacementRatioFood8 = 1                  # (int) Relative likelihood to place Food8
  rewardForMove = 0.0                        # (double) reward for moving
  rewardForTurn = 0.0                        # (double) reward for turning
  rewardSpatialNovelty = 0.0                 # (double) reward added to score every time organism moves on a new location

% WORLD_BERRY_NAMES
  brainName = root                           # (string) name of brains used to control organisms
                                             #    root = use empty name space
                                             #    GROUP:: = use group name space
                                             #    "name" = use "name" namespace at root level
                                             #    Group::"name" = use GROUP::"name" name space
  groupName = root                           # (string) name of group to be evaluated

% WORLD_BERRY_PLUS
  boarderEdge = 0                            # (int) edge (may overlap wall) that will be left empty (food0)
  clearOutputs = 0                           # (bool) if true outputs will be cleared on each world update
  fixedStartFacing = -1                      # (int) start facing direction (range 0-7) for organism, -1 = random
  fixedStartXRange = [-1]                    # (string) range for start location for organism (i.e. [x] for a fixed value, [x,y] to place in range), [-1] = random
  fixedStartYRange = [-1]                    # (string) range for start location for organism (i.e. [x] for a fixed value, [x,y] to place in range), [-1] = random
  foodTypes = 2                              # (int) number of types of food
  groupEvaluation = 0                        # (bool) if true, evaluate population concurrently
  makeBorderWalls = 1                        # (bool) if true world will have a bounding wall
  mapFileList = []                           # (string) list of worlds in which to evaluate organism. If empty, random world will be created
  mapFileWhichMaps = [random]                # (string) if mapFileList is not empty, this parameter will determine which maps are seen by an organism in one evaluation.
                                             #    [random] select one random map
                                             #    [all] select all maps (from all files)
                                             #    if two values are present the first determines which files to pull maps from, the second which maps from those files
                                             #    the options for the first position (file) are:
                                             #      'all' (pull from all files)
                                             #      '#' (pull from # random files - with possible repeats)
                                             #      'u#' (pull from # unique files)
                                             #    the options for the second position (map) are:
                                             #      'all' (all maps in the file)
                                             #      '#' (# random maps from file - with possible repeats)
                                             #      'u#' (# unique maps from file)
                                             #    example1: [all,u2] = from all files, 2 unique maps
                                             #    example2: [2,1] one map from each two files (might be the same file twice)
  numberOfDirections = 36                    # (int) number of rotational positions
  recordFoodList = 0                         # (bool) if true, record list of food eaten
  recordFoodListEatEmpty = 0                 # (bool) if true, foodList will include attempts to eat 0
  recordFoodListNoEat = 0                    # (bool) if true, if true foodList will include no eat (-1)
  repeats = 3                                # (int) Number of times to test each Organism per generation
  replacementDefaultRule = -1                # (int) -1 = random, 0 = no replacement, 1 = replace other (note: Food0, can be replace by Food0)
  replacementFood0 = -1                      # (int) when this type of food is replaced, replace with value, -1 = use 'replacement' value
  replacementFood1 = -1                      # (int) when this type of food is replaced, replace with value, -1 = use 'replacement' value
  replacementFood2 = -1                      # (int) when this type of food is replaced, replace with value, -1 = use 'replacement' value
  replacementFood3 = -1                      # (int) when this type of food is replaced, replace with value, -1 = use 'replacement' value
  replacementFood4 = -1                      # (int) when this type of food is replaced, replace with value, -1 = use 'replacement' value
  replacementFood5 = -1                      # (int) when this type of food is replaced, replace with value, -1 = use 'replacement' value
  replacementFood6 = -1                      # (int) when this type of food is replaced, replace with value, -1 = use 'replacement' value
  replacementFood7 = -1                      # (int) when this type of food is replaced, replace with value, -1 = use 'replacement' value
  replacementFood8 = -1                      # (int) when this type of food is replaced, replace with value, -1 = use 'replacement' value
  rewardForFood0 = 0.0                       # (double) reward for eating a Food0
  rewardForFood1 = 1.0                       # (double) reward for eating a Food1
  rewardForFood2 = 1.0                       # (double) reward for eating a Food2
  rewardForFood3 = 1.0                       # (double) reward for eating a Food3
  rewardForFood4 = 1.0                       # (double) reward for eating a Food4
  rewardForFood5 = 1.0                       # (double) reward for eating a Food5
  rewardForFood6 = 1.0                       # (double) reward for eating a Food6
  rewardForFood7 = 1.0                       # (double) reward for eating a Food7
  rewardForFood8 = 1.0                       # (double) reward for eating a Food8
  senseOther = 0                             # (bool) if true, Agents will be able to sense other agents (if there are other agents).
  senseVisited = 0                           # (bool) organism can sense if any organism has visited here
  senseWalls = 0                             # (bool) if true, Agent can sense Walls
  smellSensorArcSize = 180                   # (int) how wide is a smell arc (degrees)
  smellSensorDistanceMax = 2                 # (int) how far can orgs smell?
  smellSensorPositions = [0,9,18,27]         # (string) what directions can org smell?
  taskSwitchingCost = 1.4                    # (double) cost to change food sources
  timeCostEat = 0.25                         # (double) time it takes to eat
  timeCostMove = 1.0                         # (double) time it takes to move
  timeCostNoAction = 0.25                    # (double) time it takes to do nothing
  timeCostTurn = 0.1                         # (double) time it takes to turn
  visionSensorArcSize = 10                   # (int) how wide is a vision arc (degrees)
  visionSensorDistanceMax = 5                # (int) how far can orgs see?
  visionSensorPositions = [-2,-1,0,1,2]      # (string) what directions can org see?
  worldUpdates = 400                         # (int) amount of time a brain is tested
  worldX = 8                                 # (int) world X size
  worldY = 8                                 # (int) world Y size

% WORLD_BERRY_PLUS_ADVANCED
  allowMoveAndEat = 0                        # (bool) if true, the brain can move and eat in the same world update
  alwaysEat = 0                              # (bool) if true, brain will only have 2 outputs (0 0 : no action, 1 0 : left, 0 1 : right, 1 1 : move). Organism will always eat if
                                             #    food is present.
  alwaysStartOnFoodOfType = -1               # (int) if -1 organisms are placed randomly. if > -1, all organisms will start on this type of food (must be < 9)
  makeRandomWalls = 0                        # (int) add this many walls to the world
  recordConsumptionRatio = 0                 # (bool) if true, record greater of red/blue+1 or blue/red+1
  relativeScoring = 0                        # (bool) score will be divided by the value of the positively scoring food on the initial map (useful when replacement = 0)
  replacementRatioFood0 = 0                  # (int) Relative likelihood to leave empty space empty
  replacementRatioFood1 = 1                  # (int) Relative likelihood to place Food1
  replacementRatioFood2 = 1                  # (int) Relative likelihood to place Food2
  replacementRatioFood3 = 1                  # (int) Relative likelihood to place Food3
  replacementRatioFood4 = 1                  # (int) Relative likelihood to place Food4
  replacementRatioFood5 = 1                  # (int) Relative likelihood to place Food5
  replacementRatioFood6 = 1                  # (int) Relative likelihood to place Food6
  replacementRatioFood7 = 1                  # (int) Relative likelihood to place Food7
  replacementRatioFood8 = 1                  # (int) Relative likelihood to place Food8
  rewardForMove = 0.0                        # (double) reward for moving
  rewardForTurn = 0.0                        # (double) reward for turning
  rewardSpatialNovelty = 0.0                 # (double) reward added to score every time organism moves on a new location

% WORLD_BERRY_PLUS_NAMES
  brainName = root                           # (string) name of brains used to control organisms
                                             #    root = use empty name space
                                             #    GROUP:: = use group name space
                                             #    "name" = use "name" namespace at root level
                                             #    Group::"name" = use GROUP::"name" name space
  groupName = root                           # (string) name of group to be evaluated

% WORLD_IPD
  C = 1                                      # (bool) How will Cooperate be represented internally (Defect will = 1 - Cooperate)
  P_payOff = 1.0                             # (double) Punishment Payoff - received when both organisms defect
  R_payOff = 3.0                             # (double) Reward Payoff - received when both organisms cooperate
  S_payOff = 0.0                             # (double) Sucker Payoff - received when an organism cooperates, and their opponent defects
  T_payOff = 5.0                             # (double) Temptation Payoff - received when an organism defects, and their opponent cooperates
  fixedStrategies = [AllD,AllC,TFT,2TFT,Rand,SIMP] # (string) list of strategies which this brain can use
  numCompetitors = -1                        # (int) number of each organism will challenge (and also be challenged by).
                                             #    Total matches played will be 2 times this number * population size.
                                             #    If -1, then every organism will play every other organism once.
  playsVsFixedStrategies = 1                 # (int) number of matches each organism will play against each fixed strategy
  randomFirstMove = 0                        # (bool) if true, the first move will not be scored
  roundsFixedPerGeneration = 1               # (bool) if true, number of rounds played will be randomized once per generation, else, each game will be or random duration
  roundsMax = 200                            # (int) maximum number of rounds played
  roundsMin = 100                            # (int) minimum number of rounds played
  saveMovesList = 0                          # (bool) if true, save list of moves made by each agent to dataMap
  skipFirstMove = 1                          # (bool) if true, the first move will not be scored (note: and extra round will be played)

% WORLD_IPD_NAMES
  brainName = root                           # (string) name of brains used to control organisms
                                             #    root = use empty name space
                                             #    GROUP:: = use group name space
                                             #    "name" = use "name" namespace at root level
                                             #    Group::"name" = use GROUP::"name" name space
  groupName = root                           # (string) name of group to be evaluated

% WORLD_MEMORY
  evaluationsPerGeneration = 1               # (int) Number of times to test each Genome per generation (useful with non-deterministic brains) - NOT CURRENTLY USED
  mask = [1]                                 # (string) The window that determines how the organism should output the values it reads.
  refreshMask = 1                            # (int) how often should the mask be reset (0 = never, 1 = per generation, 2 = every eval)
  refreshPassword = 1                        # (int) how often should the password be reset (0 = never, 1 = per generation, 2 = every eval)
  worldUpdates = 3                           # (int) number of world updates, (larger than Mask's length)

% WORLD_MEMORY_NAMES
  brainName = root                           # (string) name of brains used to control organisms
                                             #    root = use empty name space
                                             #    GROUP:: = use group name space
                                             #    "name" = use "name" namespace at root level
                                             #    Group::"name" = use GROUP::"name" name space
  groupName = root                           # (string) name of group to be evaluated

% WORLD_MORRISTEST
  agentAngleMax = 180.0                      # (double) rotation to agent
  agentAngleMin = 0.0                        # (double) rotation to agent
  agentOffsetFromCenterMax = 0.95            # (double) where is agent relitive to edge and center
  agentOffsetFromCenterMin = 0.95            # (double) where is agent relitive to edge and center
  evaluationsPerGeneration = 3               # (int) Number of times to test each Genome per generation (useful with non-deterministic brains)
  markerCount = 3                            # (int) how many edge markers around the edge of the pool?
  markerSpacing = 9                          # (int) how regular is the marker placement, higher number = more regular
  platformAngleMax = 270.0                   # (double) rotation to platform
  platformAngleMin = 270.0                   # (double) rotation to platform
  platformOffsetFromCenterMax = 0.6          # (double) where is platfrom relitive to edge and center
  platformOffsetFromCenterMin = 0.6          # (double) where is platfrom relitive to edge and center
  platformReliability = 0                    # (int) 0 = move platform every time platform is found, 1 = move platform between evals, 2 = do not move platfroms (all in world evals
                                             #    with same location)
  platformSize = 1.0                         # (double) size of the platfrom
  platformVisable = 0                        # (int) 0 = not visable, 1 = visable (adds addtional inputs), 2 = visable, but only before first find of each evaluation
  senseDistances = 0                         # (bool) if true (1) then brain will sense distance to all markers (including platform if visable)
  setupForBitBrains = 0                      # (bool) 0 = use continuous values for brain i/o, 1 = convert i/o to binary format
  speedDeltaMax = 0.5                        # (double) how quickly can the speed change (+/-)?
  speedMax = 2.0                             # (double) fastest speed
  speedMin = 0.5                             # (double) slowest speed (if negitive, can move backwards)
  turnRateMax = 3.0                          # (double) fastest turn rate in the right direction
  turnRateMin = -3.0                         # (double) fastest turn rate in the left direction
  worldRadius = 25.0                         # (double) radius of pool
  worldUpdates = 1000                        # (int) world updates per evaluation

% WORLD_MORRISTEST_NAMES
  brainName = root                           # (string) name of brains used to control organisms
                                             #    root = use empty name space
                                             #    GROUP:: = use group name space
                                             #    "name" = use "name" namespace at root level
                                             #    Group::"name" = use GROUP::"name" name space
  groupName = root                           # (string) name of group to be evaluated

% WORLD_NUMERALCLASSIFIER
  WorldUpdates = 100                         # (int) number of world updates brain has to evaluate each value
  dataFileName = World/NumeralClassifierWorld/mnist.train.discrete.28x28-only100 # (string) name of file with numeral data
  retinaType = 3                             # (int) 1 = center only, 2 = 3 across, 3 = 3x3, 4 = 5x5, 5 = 7x7
  testsPreWorldEval = 5                      # (int) number of values each brain attempts to evaluate in a world evaluation

% WORLD_NUMERALCLASSIFIER_NAMES
  brainName = root                           # (string) name of brains used to control organisms
                                             #    root = use empty name space
                                             #    GROUP:: = use group name space
                                             #    "name" = use "name" namespace at root level
                                             #    Group::"name" = use GROUP::"name" name space
  groupName = root                           # (string) name of group to be evaluated

% WORLD_RPP
  numCompetitors = -1                        # (int) number of each organism will challenge (and also be challenged by).
                                             #    Total matches played will be 2 times this number * population size.
                                             #    If -1, then every organism will play every other organism once.
  numMatches = 10                            # (int) Number of times to test each Genome per generation (useful with non-deterministic brains)
  randomB = 0                                # (bool) if true, brain B will be ignored, and random behavior will be used for second player

% WORLD_RPP_NAMES
  brainAName = root                          # (string) name of brains used to control organisms when first player
                                             #    root = use empty name space
                                             #    GROUP:: = use group name space
                                             #    "name" = use "name" namespace at root level
                                             #    Group::"name" = use GROUP::"name" name space
  brainBName = root                          # (string) name of brains used to control organisms when second player
                                             #    root = use empty name space
                                             #    GROUP:: = use group name space
                                             #    "name" = use "name" namespace at root level
                                             #    Group::"name" = use GROUP::"name" name space
  groupName = root                           # (string) name of group to be evaluated

% WORLD_SOF
  scoreMapFilename = World/SOFWorld/scoreMap_20x20_2peaks.txt # (string) name of file containing score map.

% WORLD_SOF_NAMES
  brainName = root                           # (string) name of brains used to control organisms
                                             #    root = use empty name space
                                             #    GROUP:: = use group name space
                                             #    "name" = use "name" namespace at root level
                                             #    Group::"name" = use GROUP::"name" name space
  groupName = root                           # (string) name of group to be evaluated

% WORLD_TEST
  evaluationsPerGeneration = 1               # (int) Number of times to test each Genome per generation (useful with non-deterministic brains)
  mode = 0                                   # (int) 0 = bit outputs before adding, 1 = add outputs
  numberOfOutputs = 10                       # (int) number of outputs in this world

% WORLD_TEST_NAMES
  brainName = root                           # (string) name of brains used to control organisms
                                             #    root = use empty name space
                                             #    GROUP:: = use group name space
                                             #    "name" = use "name" namespace at root level
                                             #    Group::"name" = use GROUP::"name" name space
  groupName = root                           # (string) name of group to be evaluated

% WORLD_WEED
  advanceDistance = 100                      # (int) How much handler is advanced to read in genetic markers
  contributionFactor = 3                     # (int) Multiplier of food that is given to children
  germinationCost = 7                        # (int) How much food a seed loses when it is planted
  intialFood = 100.0                         # (double) weeds in the initial population start with this much food
  leafCoverageMax = 10.0                     # (double) how large can leafCoverage grow
  leafCoverageUpkeep = 1.0                   # (double) cost to maintain leafCoverage
  leafCoverageWaterUpkeep = 0.1              # (double) cost to maintain leafCoverage. This one is the one that's different
  leafWitherFactor = 0.5                     # (double) percentage leaves wither with the plants run out of water
  lifeTimeMax = 110                          # (int) high range for weed life time
  lifeTimeMin = 90                           # (int) low range for weed life time (may die sooner from starvation)
  mapFileList = []                           # (string) list of worlds in which to evaluate organism. If empty, random world will be created
  numGrowthRegimes = 4                       # (int) number of growth regime a plant can average
  offspringMinDistance = 1.0                 # (double) ratio of stalk height for minimum offspring distance
                                             #    if 0, offspring will be anywhere between 0 and stalkHeight
                                             #    if 1, offspring will be exactly at stalkHeight
  rootGirthMax = 10.0                        # (double) how large can rootGirth grow
  rootGirthUpkeep = 1.0                      # (double) cost to maintain rootGirth
  rootGirthWaterUpkeep = 0.0                 # (double) cost to maintain rootGirth default should be 0
  rootSpreadMax = -1.0                       # (double) how large can rootSpread grow. must be < worldGridSize/2. if -1 then ((worldGridSize/2)-1)
  rootSpreadUpkeep = 1.0                     # (double) cost to maintain rootSpread
  rootSpreadWaterUpkeep = 0.0                # (double) water cost to maintain rootSpread default should be 0
  saveLocations = 0                          # (bool) if true, save weedLocations.txt
  saveLocationsStep = 10                     # (int) if saveLocations = true, save when update % saveLocationsStep == 0
  saveWorldData = 1                          # (bool) if true, save saveWorldData.csv
  saveWorldDataStep = 10                     # (int) if saveWorldData = true, save when update % saveWorldDataStep == 0
  sex = 0                                    # (bool) if true, weeds will reproduce with sex
  sexEffectedByStalkHeight = 1               # (bool) if true, plants will higher stalks will have an advantage
  sexSelfIfNoMate = 1                        # (bool) if reproduction is by sex and no mate is not found, parent will self
  sexSelfPercent = 0.0                       # (double) if reproduction is by sex, percent chance to self, if negitive, % derived from genome
  sexWellMixed = 0                           # (bool) if true, a random mate will be selected from the populaiton,
                                             #    otherwise, 'mate' will be picked from weeds within worldGridSize, and closer weeds will be prefered
  stalkHeightMax = 50.0                      # (double) how large can stalkHeight grow
  stalkHeightUpkeep = 1.0                    # (double) cost to maintain stalkHeight
  stalkHeightWaterUpkeep = 0.0               # (double) cost to maintain stalkHeight default should be 0
  worldGridSize = 50                         # (int) size of one world grid (weeds can only interact with neighbors at most one grid away
  worldSize = 200                            # (int) size of world

% WORLD_WEED_NAMES
  brainName = root                           # (string) name of brains used to control organisms
                                             #    root = use empty name space
                                             #    GROUP:: = use group name space
                                             #    "name" = use "name" namespace at root level
                                             #    Group::"name" = use GROUP::"name" name space
  groupName = root                           # (string) name of group to be evaluated

