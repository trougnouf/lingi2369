% BRAIN
  brainType = Markov                         # (string) brain to be used, [Markov, CGP, LSTM, ConstantValues, GeneticPrograming, Human, IPD, Wire]

% BRAIN_CGP
  availableOperators = [all]                 # (string) which opperators are allowed? all indicates, allow all opperators or, choose from:
                                             #    SUM,MULT,SUBTRACT,DIVIDE,SIN,COS,THRESH,RAND,IF,INV
  buildMode = linear                         # (string) How is the genome converted, "linear" : linear conversion starting at begining of genome, "codon" : start codons locate
                                             #    operator+in1+in2 along with the formula/output index and a location in formula
  codonMax = 100                             # (int) if using "genes" buildMode, values will be extracted from genome as integers [0..codonMax] and two sites that add to codonMax
                                             #    defines a start codon
  hiddenNodes = 3                            # (int) number of hidden nodes
  magnitudeMax = 1000000000.0                # (double) values generated which are larger then this will by clipped
  magnitudeMin = -1000000000.0               # (double) values generated which are smaller then this will by clipped
  operatorsPreFormula = 8                    # (int) number of instructions per formula. Ignored if buildMode is "genes"
  readFromOutputs = 1                        # (bool) if true, previous updates outputs will be available as inputs.

% BRAIN_CGP_NAMES
  genomeName = root                          # (string) name of genome used to encode this brain
                                             #    root = use empty name space
                                             #    GROUP:: = use group name space
                                             #    "name" = use "name" namespace at root level
                                             #    Group::"name" = use GROUP::"name" name space

% BRAIN_CONSTANT
  initializeConstant = 0                     # (bool) If true, all values in genome will be initialized to initial constant value.
  initializeConstantValue = 0                # (int) If initialized constant, this value is used to initialize entire genome.
  initializeUniform = 0                      # (bool) Initialize genome randomly, with all samples having same value
  samplesPerValue = 1                        # (int) for each brain value, this many samples will be taken from genome and averaged
  valueMax = 100.0                           # (double) Maximum value that brain will deliver
  valueMin = 0.0                             # (double) Minmum value that brain will deliver
  valueType = 0                              # (int) 0 = int, 1 = double

% BRAIN_CONSTANT_NAMES
  genomeName = root                          # (string) name of genome used to encode this brain
                                             #    root = use empty name space
                                             #    GROUP:: = use group name space
                                             #    "name" = use "name" namespace at root level
                                             #    Group::"name" = use GROUP::"name" name space

% BRAIN_HUMAN
  actionMapFileName = actionMap.txt          # (string) if useActionMap = true, use this file
  useActionMap = 0                           # (bool) if true, an action map will be used to translate user input

% BRAIN_IPD
  availableStrategies = [AllD,AllC,TFT,2TFT,TF2T,SIMP,Rand] # (string) list of strategies which this brain can use

% BRAIN_IPD_NAMES
  genomeName = root                          # (string) name of genome used to encode this brain
                                             #    root = use empty name space
                                             #    GROUP:: = use group name space
                                             #    "name" = use "name" namespace at root level
                                             #    Group::"name" = use GROUP::"name" name space

% BRAIN_LSTM_NAMES
  genomeName = root                          # (string) name of genome used to encode this brain
                                             #    root = use empty name space
                                             #    GROUP:: = use group name space
                                             #    "name" = use "name" namespace at root level
                                             #    Group::"name" = use GROUP::"name" name space

% BRAIN_MARKOV
  genomeName = root                          # (string) name of genome used to encode this brain
                                             #    root = use empty name space
                                             #    GROUP:: = use group name space
                                             #    "name" = use "name" namespace at root level
                                             #    Group::"name" = use GROUP::"name" name space
  hiddenNodes = 8                            # (int) number of hidden nodes

% BRAIN_MARKOV_ADVANCED
  bitsPerBrainAddress = 8                    # (int) how many bits are evaluated to determine the brain addresses
  bitsPerCodon = 8                           # (int) how many bits are evaluated to determine the codon addresses
  randomizeUnconnectedOutputs = 0            # (bool) output nodes with no connections will be set randomly (default : false, behavior set to 0)
  randomizeUnconnectedOutputsMax = 1.0       # (double) random values resulting from randomizeUnconnectedOutput will be in the range of 0 to randomizeUnconnectedOutputsMax
  randomizeUnconnectedOutputsType = 0        # (int) determines type of values resulting from randomizeUnconnectedOutput [0 = int, 1 = double]

% BRAIN_MARKOV_GATES_DETERMINISTIC
  IO_Ranges = 1-4,1-4                        # (string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 1                                  # (bool) set to true to enable deterministic gates?
  initialCount = 6                           # (int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_EPSILON
  IO_Ranges = 1-4,1-4                        # (string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  # (bool) set to true to enable epsilon gates
  epsilonSource = 0.05                       # (double) if value is in ance tha[0,1], cht output will be randomized. if < 1 or < 0, epsilon value is determined by the genome. If
                                             #    positive, then the genome handler will advance int(value) number of sites - 1 from the current location, before reading. If the value
                                             #    is negative, then int(abs(value)) indicates the absolute index of the site to be used i.e.(site at abs(value) in genome)
  initialCount = 3                           # (int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_GENETICPROGRAMING
  IO_Ranges = 1-4,1-4                        # (string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  # (bool) set to true to enable GP (what?) gates
  constValueMax = 1.0                        # (double) for the const values, max value the genome can generate
  constValueMin = -1.0                       # (double) for the const values, min value the genome can generate
  initialCount = 3                           # (int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_NEURON
  allow = 0                                  # (bool) set to true to enable Neuron gates
  allowRepression = 0                        # (bool) if false, neuronGates only fire if charge exceeds threshold; if true, neuronGates can also exist which always fire, except
                                             #    when charge exceeds threshold
  decayRateMax = 0.0                         # (double) amount charge will decay (towards 0) per update
  decayRateMin = 0.0                         # (double) amount charge will decay (towards 0) per update
  deliveryChargeFromNode = 0                 # (bool) if true, gate will have additional input, which will be used as deliveryCharge
  deliveryChargeMax = 1.0                    # (double) output charge
  deliveryChargeMin = -1.0                   # (double) output charge
  deliveryError = 0.0                        # (double) error in deliveryCharge... charge -= random[0,deliveryError)
  dischargeBehavior = 0                      # (int) what happens when gate fires (-1: let genome decide, 0: clear charge, 1: 'reduce' by delivery charge, 2: 1/2 charge)
  initialCount = 3                           # (int) seed genome with this many start codons
  numInputsMax = 3                           # (int) max number of inputs to neuronGate
  numInputsMin = 3                           # (int) min number of inputs to neuronGate
  thresholdFromNode = 0                      # (bool) if true, gate will have additional input, which will be used as threshold
  thresholdMax = 1.0                         # (double) highest possible value for threshold
  thresholdMin = -1.0                        # (double) lowest possible value for threshold

% BRAIN_MARKOV_GATES_PROBABILISTIC
  IO_Ranges = 1-4,1-4                        # (string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  # (bool) set to true to enable probabilistic gates
  initialCount = 3                           # (int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_TRIT
  IO_Ranges = 1-4,1-4                        # (string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  # (bool) set to true to enable tritDeterministic gates
  initialCount = 3                           # (int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_VOID
  IO_Ranges = 1-4,1-4                        # (string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  # (bool) set to true to enable void gates
  epsilonSource = 0.05                       # (double) if value is in [0,1], chance that output will be randomized. if < 1 or < 0, epsilon value is determined by the genome. If
                                             #    positive, then the genome handler will advance int(value) number of sites - 1 from the current location, before reading. If the value
                                             #    is negative, then int(abs(value)) indicates the absolute index of the site to be used i.e.(site at abs(value) in genome
  initialCount = 3                           # (int) seed genome with this many start codons

% BRAIN_WIRE
  allowNegativeCharge = 0                    # (bool) if true, wire brain can interpret negative input, deliver negative output, and charge negatively
  bitmap_InitialFillRatio = 0.2              # (double) if bitmap genomeDecodingMethod: amount of the brain that will initially be wire vs. empty
  bitsPerCodon = 8                           # (int) how many bits are evaluated to determine the codon addresses
  cacheResults = 0                           # (bool) if true, t+1 nodes will be cached. If the same input is seen, the cached node values will be used.
  cacheResultsCount = 1                      # (int) input combinations will be cached this many times, after this, repeats of a given input array will look up a random value from
                                             #    cached values
  chargeUpdatesPerUpdate = 30                # (int) Number of charge updates per brain update
  constantInputs = 1                         # (bool) if true, input values are reset every charge update, if not, input values are set on first charge update only.
  decayDuration = 1                          # (int) length of time a cell will decay (while in decay a cell can not become charged)
  genomeDecodingMethod = bitmap              # (string) bitmap = convert genome directly, wiregenes = genes defined by start codeons, location, direction and location
  hiddenNodes = 8                            # (int) number of hidden values (allows for memory)
  overchargeThreshold = 3                    # (int) If a cell receives this much charge or more, it will not charge
  size_depth = 6                             # (int) depth of the wire brain cube
  size_height = 6                            # (int) height of the wire brain cube
  size_width = 6                             # (int) width of the wire brain cube
  worldConnectionsSeparation = 7             # (int) distance between nodes input and output connections (I/O)

% BRAIN_WIRE_NAMES
  genomeName = root                          # (string) name of genome used to encode this brain
                                             #    root = use empty name space
                                             #    GROUP:: = use group name space
                                             #    "name" = use "name" namespace at root level
                                             #    Group::"name" = use GROUP::"name" name space

% BRAIN_WIRE_WIREGENE
  allowSimpeWires = 1                        # (bool) allow SimpleWire features (lengths of straight wire)
  allowSquiggleWires = 0                     # (bool) allow squiggleWire features (wires generated by converting genome into list of directions)
  allowWormholes = 0                         # (bool) allow Wormhole features (one directional links between distant wires)
  initialGeneCount = 50                      # (int) number of start codons to be inserted into initial genome (add even number of all - even if not allowed)
  simpleWireDirections = cardinalOnly        # (string) cardinalOnly (wires project in 6 square directions) vs diagonalsAlso (wires project on diagonals also)
  simpleWireMaxLength = 1                    # (int) maximum length of a SimpleWire (if 1, direction is effectively ignored). Wires that would project outside of brain are clipped
  squiggleWireDirections = cardinalOnly      # (string) cardinalOnly (wires project in 6 square directions) vs diagonalsAlso (wires project on diagonals also)
  squiggleWireMaxLength = 10                 # (int) maximum length of a SquiggleWire (if 1, it will look just like a SimpleWire). Wires that would project outside of brain are
                                             #    clipped
  squiggleWireMinLength = 4                  # (int) minimum length of a SquiggleWire (if 1, it will look just like a SimpleWire). Wires that would project outside of brain are
                                             #    clipped
  wormholesBidirectional = 0                 # (int) allow Wormhole features to be bidirectional(0 = no, 1 = random, 2 = always)

% GENOME
  alphabetSize = 256.0                       # (double) alphabet size for genome
  genomeType = Circular                      # (string) genome to be used, [Circular, Multi]
  sitesType = char                           # (string) type for sites in genome [char, int, double, bool]

% GENOME_CIRCULAR
  mutationCopyMaxSize = 512                  # (int) maximum size of insertion mutation
  mutationCopyMinSize = 128                  # (int) minimum size of insertion mutation
  mutationCopyRate = 0.00002                 # (double) per site insertion rate
  mutationCrossCount = 3                     # (int) number of crosses when performing crossover (including during recombination)
  mutationDeleteMaxSize = 512                # (int) maximum size of insertion mutation
  mutationDeleteMinSize = 128                # (int) minimum size of insertion mutation
  mutationDeleteRate = 0.00002               # (double) per site deletion rate
  mutationPointRate = 0.005                  # (double) per site point mutation rate
  sizeInitial = 5000                         # (int) starting size for genome
  sizeMax = 20000                            # (int) if genome is larger then this, mutations will only decrease chromosome size
  sizeMin = 2000                             # (int) if genome is smaller then this, mutations will only increase chromosome size

% GENOME_MULTI
  chromosomeSizeInitial = 5000               # (int) starting size for all chromosomes in genome (inital genome size will be chromosomeSizeInitial * chromosome_sets *
                                             #    chromosome_ploidy)
  chromosomeSizeMax = 20000                  # (int) if a chromosome is larger then this, mutations will only decrease chromosome size
  chromosomeSizeMin = 2000                   # (int) if a chromosome is smaller then this, mutations will only increase chromosome size
  chromosome_ploidy = 1                      # (int) number of chromosomes in each chromosome_set
  chromosome_sets = 1                        # (int) number of chromosome sets (e.g. chromosome_set = 2 and chromosome_ploidy = 3 will result in a genome with 6 chromosomes)
  mutationCopyMaxSize = 512                  # (int) maximum size of insertion mutation
  mutationCopyMinSize = 128                  # (int) minimum size of insertion mutation
  mutationCopyRate = 0.00002                 # (double) per site insertion rate
  mutationCrossCount = 3                     # (int) number of crosses when performing crossover
  mutationDeleteMaxSize = 512                # (int) maximum size of insertion mutation
  mutationDeleteMinSize = 128                # (int) minimum size of insertion mutation
  mutationDeleteRate = 0.00002               # (double) per site deletion rate
  mutationPointRate = 0.005                  # (double) per site point mutation rate

